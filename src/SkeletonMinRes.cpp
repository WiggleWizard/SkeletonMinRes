#include <iostream>
#include <fstream>
#include <algorithm>
#include <string>

using namespace std;

#ifndef SKMINRES_VERSION
#define SKMINRES_VERSION ""
#endif

#define RES_NAMESPACE "res"


inline bool exists(const char* file)
{
	return ifstream(file).good();
}

int main(int argc, char* argv[])
{
    if(argc < 4)
    {
        cerr << "USAGE: " << argv[0] << " {sym} {rsrc} {hdr}" << endl << endl
            << "  Creates {sym}.cpp from the contents of {rsrc}" << endl;
        return EXIT_FAILURE;
    }

    // The following should prevent most failures wrt. invalid resource/variable names:
    string sym(argv[2]);
    replace(sym.begin(), sym.end(), '.', '_');
    replace(sym.begin(), sym.end(), '-', '_');
    replace(sym.begin(), sym.end(), '/', '_');
    replace(sym.begin(), sym.end(), '\\', '_');
    for(size_t i = 0; i < sym.size(); ++i)
    {
        if(!isalnum(sym[i]) && sym[i] != '_')
        {
            cerr << "error: symbol \"" << sym << "\" should only contain alpha-numeric characters ('" <<
            	sym[i] << "' at " << i << " is forbidden)" << endl;
            return EXIT_FAILURE;
        }
    }

    ifstream ifs;
    ifs.open(argv[2], ios::in | ios::binary);
    if(!ifs.is_open())
    {
        cerr << "error: unable to read " << argv[2] << endl;
        return EXIT_FAILURE;
    }
    ifs.ignore(numeric_limits<streamsize>::max());
    streamsize file_size = ifs.gcount();
    ifs.clear(); // since ignore will have set eof.
    ifs.seekg(0, ios_base::beg);

    ofstream ofs;
    ofs.open(argv[1]);
    if(!ofs.is_open())
    {
        cerr << "error: unable to create " << argv[1] << endl;
        return EXIT_FAILURE;
    }

    ofs << "#include <cstddef>\n\n";
    ofs << "namespace " RES_NAMESPACE " {\n\n";
    ofs << "extern const char _resource_" << sym << "[] = {\n  ";
    // Note: extern is required when using C++ (which we do) to prevent internal linkage since
    //       "const" is used here as well (and force internal linkage in C++, in contrast to C).

    size_t line_break = 0;
    char c;
    int i = 0;
    while(ifs >> noskipws >> c)
    {
        ofs << "0x" << hex << (c & 0xff) << (i++ < int(file_size) - 1 ? ", " : " ");
        if(++line_break == 10)
        {
            ofs << "\n  ";
            line_break = 0;
        }
    }

    ofs << "};\n\n";
    ofs << "extern const std::size_t _resource_" << sym << "_len = sizeof(_resource_" << sym << ");\n\n";
    ofs << "} // end of namespace: " RES_NAMESPACE << endl;

    // Write header:
    bool header_exists = exists(argv[3]);
    ofstream ofs_header;
    ofs_header.open(argv[3], header_exists ? ios::out | ios::app : ios::out);
    if(!ofs_header.is_open())
    {
        cerr << "error: unable to create " << argv[3] << endl;
        return EXIT_FAILURE;
    }

    if(!header_exists)
    {
        ofs_header << "// WARNING: this file is auto-generated by SkeletonMinRes v" SKMINRES_VERSION "! Do not edit!\n"
            << "//          The content is based on the resources provided to embed_resources() in your CMakeLists.txt.\n\n"
            << "#pragma once\n\n";
    }
    ofs_header << "namespace res {\n\n";
    ofs_header << "extern const char _resource_" << sym << "[];\n";
    ofs_header << "extern const std::size_t _resource_" << sym << "_len;\n\n";
    ofs_header << "} // end of namespace: res" << endl;

    return EXIT_SUCCESS;
}
